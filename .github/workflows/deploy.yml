name: Deploy Slack App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up mise
        uses: jdx/mise-action@v2

      - name: Install Slack CLI
        run: |
          curl -fsSL https://downloads.slack-edge.com/slack-cli/install.sh | bash
          echo "export PATH=\"$HOME/.slack/bin:$PATH\"" >> $GITHUB_ENV

      - name: Create GitHub Deployment
        id: create_deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DEPLOYMENT_ID=$(gh api repos/${{ github.repository }}/deployments \
            -f ref=${{ github.sha }} \
            -f environment=sandbox \
            -f description="Deploying Slack App" \
            -f required_contexts[]='' \
            --jq '.id')
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - name: Deploy Slack App
        id: slack_deploy
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          APP: ${{ env.SLACK_APP_ID }}
        run: |
          slack deploy --app "$APP" --token "$SLACK_SERVICE_TOKEN"

      - name: Locate Cloudformation Stack Name
        id: stack_name
        run: |
          TEMPLATE_FILE=$(find cdk/cdk.out -name "*.template.json" | head -n 1)
          if [ -n "$TEMPLATE_FILE" ]; then
            TEMPLATE_NAME=$(basename "$TEMPLATE_FILE" .template.json)
            echo "STACK_NAME=$TEMPLATE_NAME" >> $GITHUB_OUTPUT
            echo "Found template: $TEMPLATE_NAME"
          else
            echo "No template file found"
            exit 1
          fi

      - name: Get ECR Image URI from CloudFormation
        id: cdk_output
        env:
          AWS_REGION: ${{ env.AWS_REGION || 'ap-southeast-2' }}
        run: |
          STACK_NAME=${{ steps.stack_name.outputs.STACK_NAME }}
          IMAGE_URI=$(aws cloudformation describe-stacks \
            --region "$AWS_REGION" \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ECRImageUri'].OutputValue" \
            --output text)
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Update GitHub Deployment Status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.deployment_id }}/statuses \
            -f state=success \
            -f environment=sandbox \
            -f environment_url="https://github.com/${{ github.repository }}/commit/${{ github.sha }}" \
            -f log_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f description="Deployment finished" \
            -f payload="$(jq -n --arg image_uri '${{ steps.cdk_output.outputs.image_uri }}' '{image_uri: $image_uri}')"
