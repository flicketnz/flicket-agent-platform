name: Deploy Slack App

permissions:
  contents: read
  deployments: write

on:
  push:
    branches:
      - main

jobs:
  deploy:
    environment: sandbox
    runs-on: ubuntu-latest
    steps:
      - run: env

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up mise
        uses: jdx/mise-action@v2

      - name: Install Slack CLI
        run: |
          curl -fsSL https://downloads.slack-edge.com/slack-cli/install.sh | bash
          echo "export PATH=\"$HOME/.slack/bin:$PATH\"" >> $GITHUB_ENV

      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'sandbox',
              description: 'Deploying Slack App',
              required_contexts: [],
              auto_merge: false
            });
            core.setOutput('deployment_id', deployment.data.id);

      - name: Deploy Slack App
        id: slack_deploy
        run: |
          slack deploy --app "${{ vars.SLACK_APP_ID }}" --token "${{ secrets.SLACK_SERVICE_TOKEN }}"

      - name: Locate Cloudformation Stack Name
        id: stack_name
        run: |
          TEMPLATE_FILE=$(find cdk/cdk.out -name "*.template.json" | head -n 1)
          if [ -n "$TEMPLATE_FILE" ]; then
            TEMPLATE_NAME=$(basename "$TEMPLATE_FILE" .template.json)
            echo "STACK_NAME=$TEMPLATE_NAME" >> $GITHUB_OUTPUT
            echo "Found template: $TEMPLATE_NAME"
          else
            echo "No template file found"
            exit 1
          fi

      - name: Get ECR Image URI from CloudFormation
        id: cdk_output
        env:
          AWS_REGION: ${{ env.AWS_REGION || 'ap-southeast-2' }}
        run: |
          STACK_NAME=${{ steps.stack_name.outputs.STACK_NAME }}
          IMAGE_URI=$(aws cloudformation describe-stacks \
            --region "$AWS_REGION" \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ECRImageUri'].OutputValue" \
            --output text)
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Update GitHub Deployment Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'success',
              environment: 'sandbox',
              environment_url: `https://github.com/${{ github.repository }}/commit/${{ github.sha }}`,
              log_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: 'Deployment finished',
              payload: {
                image_uri: `${{ steps.cdk_output.outputs.image_uri }}`
              }
            });
